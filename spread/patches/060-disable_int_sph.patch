--- a/libspread/sp.c
+++ b/libspread/sp.c
@@ -144,7 +144,7 @@ static	int	SP_get_session( mailbox mbox 
 static	int	SP_internal_multicast( mailbox mbox, service service_type, 
 				       int num_groups,
 				       const char groups[][MAX_GROUP_NAME],
-				       int16 mess_type,
+				       short mess_type,
 				       const scatter *scat_mess );
 
 /* This is a null authenticate method that does nothing */
@@ -558,9 +558,9 @@ int	SP_connect_timeout( const char *spre
 {
 	/* struct	hostent		*host_ptr, *gethostbyname(); */
 	struct	hostent		*host_ptr;
-	int16			port;
-	int32			host_address;
-	int32			lport, i1, i2, i3, i4;
+	short			port;
+	int			host_address;
+	int			lport, i1, i2, i3, i4;
 	char			*c_ptr;
 	char			host_name[MAXHOSTNAMELEN];
 	char			s_name[SPREAD_MAXCONNECT_NAMELEN + 1];
@@ -578,7 +578,7 @@ int	SP_connect_timeout( const char *spre
         unsigned int            len;
 	int			sp_v1, sp_v2, sp_v3;
 	char		        cval;
-	int32			on;
+	int			on;
 
 	struct	sockaddr_in	inet_addr;
 
@@ -639,7 +639,7 @@ int	SP_connect_timeout( const char *spre
 		if( host_ptr != NULL )
 		{
 			/* option 3333@commedia.cs.jhu.edu */
-			memcpy( &host_address, host_ptr->h_addr, sizeof(int32) );
+			memcpy( &host_address, host_ptr->h_addr, sizeof(int) );
 		}else{
 			/* option 3333@128.220.221.1 */
 			for(i=0; i< 3; i++)
@@ -675,7 +675,7 @@ int	SP_connect_timeout( const char *spre
 
 		inet_addr.sin_family = AF_INET;
 		inet_addr.sin_port   = htons( port );
-	        memcpy( &inet_addr.sin_addr, &host_address, sizeof(int32) );
+	        memcpy( &inet_addr.sin_addr, &host_address, sizeof(int) );
 		ret = connect_nointr_timeout( s, (struct sockaddr *)&inet_addr, sizeof(inet_addr), &time_out);
 	}else{
 
@@ -998,7 +998,7 @@ int	SP_leave( mailbox mbox, const char *
 
 int	SP_multicast( mailbox mbox, service service_type, 
 		      const char *group,
-		      int16 mess_type, int mess_len, const char *mess )
+		      short mess_type, int mess_len, const char *mess )
 {
 	int		ret;
 	char		send_group[MAX_GROUP_NAME];
@@ -1018,7 +1018,7 @@ int	SP_multicast( mailbox mbox, service 
 
 int	SP_scat_multicast( mailbox mbox, service service_type, 
 			   const char *group,
-			   int16 mess_type, const scatter *scat_mess )
+			   short mess_type, const scatter *scat_mess )
 {
 	int		ret;
 	char		send_group[MAX_GROUP_NAME];
@@ -1034,7 +1034,7 @@ int	SP_scat_multicast( mailbox mbox, ser
 int	SP_multigroup_multicast( mailbox mbox, service service_type, 
 			   	 int num_groups,
 				 const char groups[][MAX_GROUP_NAME],
-		      		 int16 mess_type, int mess_len,
+		      		 short mess_type, int mess_len,
 				 const char *mess )
 {
 	int		ret;
@@ -1051,7 +1051,7 @@ int	SP_multigroup_multicast( mailbox mbo
 int	SP_multigroup_scat_multicast( mailbox mbox, service service_type, 
 			   	      int num_groups,
 				      const char groups[][MAX_GROUP_NAME],
-			   	      int16 mess_type,
+			   	      short mess_type,
 				      const scatter *scat_mess )
 {
 	int		ret;
@@ -1065,7 +1065,7 @@ int	SP_multigroup_scat_multicast( mailbo
 static	int	SP_internal_multicast( mailbox mbox, service service_type, 
 				       int num_groups,
 				       const char groups[][MAX_GROUP_NAME],
-				       int16 mess_type,
+				       short mess_type,
 				       const scatter *scat_mess )
 {
 
@@ -1180,7 +1180,7 @@ static	int	SP_internal_multicast( mailbo
 
 int	SP_receive( mailbox mbox, service *service_type, char sender[MAX_GROUP_NAME],
 		    int max_groups, int *num_groups, char groups[][MAX_GROUP_NAME],
-		    int16 *mess_type, int *endian_mismatch,
+		    short *mess_type, int *endian_mismatch,
 		    int max_mess_len, char *mess )
 {
 	int		ret;
@@ -1197,7 +1197,7 @@ int	SP_receive( mailbox mbox, service *s
 
 int	SP_scat_receive( mailbox mbox, service *service_type, char sender[MAX_GROUP_NAME],
 			 int max_groups, int *num_groups, char groups[][MAX_GROUP_NAME],
-			 int16 *mess_type, int *endian_mismatch,
+			 short *mess_type, int *endian_mismatch,
 			 scatter *scat_mess )
 {
 
@@ -1207,7 +1207,7 @@ static	char		dummy_buf[10240];
 	message_header	mess_head;
 	message_header	*head_ptr;
 	char		*buf_ptr;
-        int32           temp_mess_type;
+        short           temp_mess_type;
 	int		len, remain, ret;
 	int		max_mess_len;
 	int		short_buffer;
@@ -1217,7 +1217,7 @@ static	char		dummy_buf[10240];
 	int		ses;
 	char		This_session_private_group[MAX_GROUP_NAME];
 	int		i;
-        int32           old_type;
+        int             old_type;
 
         /* I must acquire the lock for this mbox before the Struct_mutex lock because
          * I must be sure ONLY one thread is in recv for this mbox, EVEN for 
